---
description: 
globs: 
alwaysApply: true
---
# Build and Deployment Workflow Rule

> **Primary Local Verification:**  
> Use the `verify:local` script to run a full local verification (clear production cache, build, lint, type-check, unit/integration tests, and E2E) in one command without affecting your dev server's `.next` directory:
> ```bash
> npm run verify:local
> ```

**Note:** Production builds now output into `.next-prod`, while development previews continue to use `.next`. Clearing the production cache should only remove `.next-prod`.

## Development Server Usage Guidelines

**ðŸš« DO NOT run `npm run dev` unless:**
- Explicitly requested by the user for browser testing
- Visual/UI validation required in live browser environment  
- Hot reload testing needed for iterative development
- Debugging client-side runtime issues requiring live inspection
- User specifically asks to "start the dev server" or "test in browser"

**âœ… FOR CODE ANALYSIS, DEBUGGING, AND FIXES, USE:**
- File reading and code inspection tools (primary method)
- `npm run build` for compile-time errors and TypeScript issues
- `npm run lint -- --fix` for linting and import sorting issues  
- `npm run verify:local` for comprehensive validation
- Static code analysis over live server debugging

**Rationale:** The dev server provides limited value for most debugging tasks. Code analysis through file inspection is more efficient, targeted, and doesn't interfere with existing development workflows. The build process catches 95% of issues without needing a live server.

Always perform the following steps on any code changes before pushing to the `main` branch:

1. **Clear Cache**  
   Remove the Next.js production build cache by deleting the `.next-prod` directory:  
   ```bash
   rm -rf .next-prod
   ```  
   *Your dev server's `.next` directory remains intact when running builds in parallel.*

2. **Internal Build**  
   Ensure the application compiles without errors:  
   ```bash
   npm run build
   ```

3. **Formatting & Linting**  
   a) Verify Prettier formatting:  
   ```bash
   npm run format:check
   ```  
   b) Run ESLint and autoâ€“fix imports:  
   ```bash
   npm run lint -- --fix
   ```  
   c) Run Biome in lint-only mode:  
   ```bash
   npx biome lint app components lib hooks
   ```

4. **Unit & Integration Tests**  
   Run Vitest to validate all unit and integration tests pass:  
   ```bash
   npm test
   ```  
   (Optionally, include coverage reports: `npx vitest run --coverage`.)

5. **E2E / Smoke Tests**  
   Run your end-to-end and smoke tests (Playwright):  
   ```bash
   npx playwright test
   ```

6. **Internal Deployment**  
   Deploy to a staging environment to validate runtime behavior:  
   ```bash
   npm run deploy -- --target staging
   ```
   â€“ Manually browse key pages (home, landing, resource) to confirm nothing is broken.

After **every** build, lint, and test step passes with **zero errors**, **zero warnings**, and **all tests green**:

7. **Git Push**  
   Commit any final changes and push to the `main` branch. On live repository, the entire codebase. git push origin main. So not just the files updated in the chat, THE ENTIRE CODEBASE. Find all files updated or created.

8. **Auto-Deployment to Vercel**  
   Pushing to `main` will trigger your Vercel workflow and deploy to production.

_Do not skip any step in this workflowâ€”ensuring a fully functional, bug-free codebase is mandatory before going live._  

## ESLint `simple-import-sort` Rule (Date: 2025-04-28)

- **Issue:** Builds were failing due to unsorted imports (`simple-import-sort/imports` & `simple-import-sort/exports`).  
- **Resolution:** Always run ESLint with `--fix` to apply the project's configured sort order reliably.  
- **Workflow Reminder:** After adding or updating imports/exports (e.g. when scaffolding new pages or sections), be sure to re-run:  
  ```bash
  npm run lint -- --fix
  ```

And to run a Lighthouse check use `npm run lhci:prod` for live URL real results on deployed sites. Local CI testing has been removed due to environment reliability issues.

## Local All-in-One Verification
Instead of running each step manually, you can use the `verify:local` script to clear the production cache, run build, lint, type-check, unit/integration tests, and end-to-end tests in one command:
```bash
npm run verify:local
```